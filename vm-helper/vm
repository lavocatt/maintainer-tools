#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0

import argparse
import os
import platform
import shutil
import subprocess
import sys
import shutil
from contextlib import contextmanager

RESET = "\033[0m"
BOLD = "\033[1m"

def read_ssh_key(ssh_key_file):
    for l in ssh_key_file.readlines():
        if " " in l:
            if l.split(" ")[0] == "ssh-rsa":
                return l.split(" ")[1]

@contextmanager
def gen_cloud_init_files(rundir, username, password, ssh_key, override, verbose=False):
    cfghome = os.getenv("XDG_CONFIG_HOME", default=os.path.expanduser("~/.config"))
    cfgdir = os.path.join(cfghome, "vmci")
    if verbose:
        print(f"cfgdir: {cfgdir}")
        print(f"rundir: {rundir}")

    datdir = os.path.join(rundir, "data")
    try:
        shutil.copytree(cfgdir, datdir)
    except FileNotFoundError:
        os.mkdir(datdir)

    if not os.path.exists(os.path.join(datdir, "meta-data")):
        shutil.copy("meta-data", os.path.join(datdir, "meta-data"))

    if not os.path.exists(os.path.join(datdir, "user-data")) or override:
        if not ssh_key:
            raise RuntimeError("You must provide sshkey if you generate a cloudinit on the fly")
        if not password:
            print(f"Password is set to {username} because it was not provided")
            password = username
        with open("user-data.sample", "r") as sample:
            with open(os.path.join(datdir, "user-data"), "w") as ud:
                for l in sample.readlines():
                    if "{USERNAME}" in l:
                        ud.write(l.replace("{USERNAME}", username))
                    elif "{PASSWORD}" in l:
                        ud.write(l.replace("{PASSWORD}", password))
                    elif "{SSHKEY}" in l:
                        ud.write(l.replace("{SSHKEY}", ssh_key))
                    else:
                        ud.write(l)
    try:
        yield datdir
    except Exception as e:
        print(e, file=sys.stderr)
    os.remove(os.path.join(datdir, "user-data"))


def genisoimage(rundir, datdir):
    args = [
        "mkisofs",
        "-input-charset", "utf-8",
        "-output", f"{rundir}/cloudinit.iso",
        "-volid", "cidata",
        "-joliet",
        "-rock",
        "-quiet",
        f"{datdir}/user-data",
        f"{datdir}/meta-data"]
    subprocess.run(args, check=True)


def is_darwin():
    osid = platform.system()
    return osid == "Darwin"


def machine_id():
    if is_darwin():
        args = [
            "ioreg", "-rd1", "-c", "IOPlatformExpertDevice"]
        r = subprocess.run(args, stdout=subprocess.PIPE, check=True)
        data = r.stdout.decode("utf-8").strip()
        for l in data.split("\n"):
            if not "IOPlatformUUID" in l:
                continue
            k, v = l.split('" = "', 2)
            mid = v.rstrip().rstrip('""')
            return mid
        raise RuntimeError("Failed to determine machine id")
    else:
        with open("/etc/machine-id", "r") as f:
            mid = f.read().strip()

    return mid


def find_omvf():
    dirs = [
        "~/.local/share/ovmf",
        "/usr/share/OVMF"
    ]

    for d in dirs:
        path = os.path.expanduser(d)
        if os.path.exists(path):
            return path

    raise RuntimeError("Could not find OMVF")


def main():
    parser = argparse.ArgumentParser(description="Boot virtual machine images")
    parser.add_argument("--memory", default=2048, help="Memory of the machine")
    parser.add_argument("--persist", default=False, action="store_true")
    parser.add_argument("--verbose", default=False, action="store_true")
    parser.add_argument("--cdrom", type=str, help="CD-ROM to use (disables cloud init)")
    parser.add_argument("--username",
                        type=str,
                        default=os.getlogin(),
                        help="username to setup in the vm")
    parser.add_argument("--password",
                        type=str,
                        help="password for the --username")
    ssh_dir = os.path.expanduser("~/.ssh")
    parser.add_argument("--ssh-key",
                        type=argparse.FileType('r'),
                        default=os.path.join(ssh_dir, "id_rsa.pub"),
                        help="ssh public key file to log into the vm")
    parser.add_argument("--override-user-data",
                        default=False,
                        action="store_true",
                        help="override the user-data file with a generated one")
    parser.add_argument("image", type=str, help="The image to boot")
    parser.set_defaults(architecture="x86_64")
    subparsers = parser.add_subparsers(help="commands")

    parser_sub = subparsers.add_parser("x86_64", help="x64 architecture",
                                       aliases=["x64"])
    parser_sub.add_argument("-U", "--uefi", dest="uefi", action="store_true", default=False,
                            help="Boot via UEFI")
    parser_sub.add_argument("-S", "--secureboot", dest="secureboot", action="store_true", default=False,
                            help="Boot via UEFI and enable SecureBoot")
    parser_sub.set_defaults(architecture="x86_64")

    parser_sub = subparsers.add_parser("aarch64", help="ARM 64 architecture")
    parser_sub.set_defaults(architecture="aarch64")

    parser_sub = subparsers.add_parser("s390x", help='s390x architecture',
                                       aliases=['s390'])
    parser_sub.set_defaults(architecture='s390x')

    parser_sub = subparsers.add_parser("ppc64le", help='PPC 64 LE architecture',
                                       aliases=['ppc', 'ppc64'])
    parser_sub.set_defaults(architecture='ppc64le')

    argv, extra = parser.parse_known_args()
    argv = vars(argv)

    runtimedir = os.getenv("XDG_RUNTIME_DIR", default="/tmp")
    rundir = os.path.join(runtimedir, "vmci")
    shutil.rmtree(rundir, ignore_errors=True)
    os.makedirs(rundir, exist_ok=True)

    username = argv.get("username")
    password = argv.get("password")
    ssh_key = read_ssh_key(argv.get("ssh_key"))
    override = argv.get("override-user-data")
    with gen_cloud_init_files(rundir, username, password, ssh_key, override,
                              argv["verbose"]) as datdir:
        genisoimage(rundir, datdir)

        arch = argv["architecture"]

        if arch == "x86_64":
            args = ["qemu-system-x86_64"]
            args += [
                "-machine",
                "q35",
                "-cpu",
                "host",
            ]
            if argv.get("secureboot", False):
                omvf = find_omvf()
                args += [
                    "-drive",
                    f"file={omvf}/OVMF_CODE.secboot.fd,if=pflash,format=raw,unit=0,readonly=on",
                    "-drive",
                    f"file={omvf}/OVMF_VARS.secboot.fd,if=pflash,format=raw,unit=1,readonly=off",
                ]
            elif argv.get("uefi", False):
                omvf = find_omvf()

                args += [
                    "-drive", f"file={omvf}/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on"
                ]
        elif arch == "aarch64":
            args = [
                "qemu-system-aarch64",
                "-M", "virt",
                "-bios", "/usr/share/edk2/aarch64/QEMU_EFI.fd",
                "-boot", "efi",
                "-cpu", "cortex-a57"
            ]
        elif arch == "s390x":
            args = ['qemu-system-s390x']
        elif arch == "ppc64le":
            args = ['qemu-system-ppc64']
        else:
            print("unsupported architecture", file=sys.stderr)
            sys.exit(1)

        if platform.machine() == arch:
            if is_darwin():
                args += ["-M", "accel=hvf"]
            else:
                args += ['-enable-kvm']
        else:
            print("Acceleration: off")

        if not argv["persist"]:
            args += ["-snapshot"]

        portfwd = {
            2222: 22,
            9091: 9090
        }

        for local, remote in portfwd.items():
            print(f"port {BOLD}{local}{RESET} â†’ {BOLD}{remote}{RESET}")

        fwds = [f"hostfwd=tcp::{h}-:{g}" for h, g in portfwd.items()]

        # create a new mac address based on our machine id
        data = machine_id()

        maclst = ["FE"] + [data[x:x+2] for x in range(-12, -2, 2)]
        macstr = ":".join(maclst)

        print(f"MAC: {BOLD}{macstr}{RESET}")

        cdrom = argv.get("cdrom")
        if not cdrom:
            cdrom = f"{rundir}/cloudinit.iso"

        args += [
            "-m", str(argv["memory"]),
            "-drive", "file=%s" % argv["image"],
            "-cdrom", cdrom,
            "-device", f"virtio-net-pci,netdev=n0,mac={macstr}",
            "-netdev", "user,id=n0,net=10.0.2.0/24," + ",".join(fwds),
        ] + extra

        if argv["verbose"]:
            print(" ".join(args))

        try:
            res = subprocess.run(args, check=False)
        except KeyboardInterrupt:
            print("Aborted")

    return res.returncode


if __name__ == "__main__":
    sys.exit(main())
